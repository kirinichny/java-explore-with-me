{
	"info": {
		"_postman_id": "603a6b67-010b-45ac-b5d6-ebb730f854bb",
		"name": "Test Explore With Me - Feature Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27505608"
	},
	"item": [
		{
			"name": "Создание комментария незарегистрированным пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        comment = rnd.getComment(event.id);\r",
							"        delete comment[\"parentCommentId\"];\r",
							"        delete comment[\"isAnonymous\"];\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(comment),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, author, parentComment, isAnonymous, hasParticipated, comment, status, lastModifiedDate, createdOn\", function () {\r",
							"    pm.expect(target).to.have.keys('id', 'event', 'author', 'parentComment', 'isAnonymous', 'hasParticipated', 'comment', 'status', 'lastModifiedDate', 'createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.event.id).equal(source.eventId, 'Идентификатор события должен соответствовать идентификатору события в запросе');\r",
							"    pm.expect(target.comment).equal(source.comment, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария зарегистрированным пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        comment = rnd.getComment(event.id);\r",
							"        comment[\"authorId\"] = user.id;\r",
							"        delete comment[\"parentCommentId\"];\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(comment),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, author, parentComment, isAnonymous, hasParticipated, comment, status, lastModifiedDate, createdOn\", function () {\r",
							"    pm.expect(target).to.have.keys('id', 'event', 'author', 'parentComment', 'isAnonymous', 'hasParticipated', 'comment', 'status', 'lastModifiedDate', 'createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.event.id).equal(source.eventId, 'Идентификатор события должен соответствовать идентификатору события в запросе');\r",
							"    pm.expect(target.author.id).equal(source.authorId, 'Идентификатор автора комментария должен соответствовать идентификатору автора комментария в запросе');\r",
							"    pm.expect(target.comment).equal(source.comment, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание анонимного комментария со скрытием автора",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        comment = rnd.getComment(event.id);\r",
							"        comment[\"isAnonymous\"] = true;\r",
							"        delete comment[\"parentCommentId\"];\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(comment),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, author, parentComment, isAnonymous, hasParticipated, comment, status, lastModifiedDate, createdOn\", function () {\r",
							"    pm.expect(target).to.have.keys('id', 'event', 'author', 'parentComment', 'isAnonymous', 'hasParticipated', 'comment', 'status', 'lastModifiedDate', 'createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.event.id).equal(source.eventId, 'Идентификатор события должен соответствовать идентификатору события в запросе');\r",
							"    pm.expect(target.comment).equal(source.comment, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
							"});\r",
							"\r",
							"pm.test(\"Автор комментария должен быть скрыт\", function () {\r",
							"    pm.expect(target.author).to.be.null;\r",
							"    pm.expect(target.isAnonymous).equal(true, 'Признак анонимности должен быть истинным');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ответ на комментарий другого пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const userTwo = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", userTwo.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(userTwo.id, rnd.getEvent(category.id));\r",
							"        const userOne = await api.addUser(rnd.getUser());\r",
							"        const commentOne = await api.addComment(userOne.id, rnd.getComment(event.id));\r",
							"        comment = rnd.getComment(event.id);\r",
							"        comment[\"authorId\"] = userTwo.id;\r",
							"        comment[\"parentCommentId\"] = commentOne.id;\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(comment),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, author, parentComment, isAnonymous, hasParticipated, comment, status, lastModifiedDate, createdOn\", function () {\r",
							"    pm.expect(target).to.have.keys('id', 'event', 'author', 'parentComment', 'isAnonymous', 'hasParticipated', 'comment', 'status', 'lastModifiedDate', 'createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.event.id).equal(source.eventId, 'Идентификатор события должен соответствовать идентификатору события в запросе');\r",
							"    pm.expect(target.author.id).equal(source.authorId, 'Идентификатор автора комментария должен соответствовать идентификатору автора комментария в запросе');\r",
							"    pm.expect(target.comment).equal(source.comment, 'Текст комментария должен соответствовать тексту комментария в запросе');\r",
							"    pm.expect(target.parentComment.id).equal(source.parentCommentId, 'Идентификатор родительского комментария должен соответствовать идентификатору родительского комментария в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария незарегистрированным пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        const comment = await api.addComment(user.id, rnd.getComment(event.id));\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, author, parentComment, isAnonymous, hasParticipated, comment, status, lastModifiedDate, createdOn\", function () {\r",
							"    pm.expect(target).to.have.keys('id', 'event', 'author', 'parentComment', 'isAnonymous', 'hasParticipated', 'comment', 'status', 'lastModifiedDate', 'createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "(Required) id текущего события"
						},
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id текущего комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария текущего пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        const comment = await api.addComment(user.id, rnd.getComment(event.id));\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, author, parentComment, isAnonymous, hasParticipated, comment, status, lastModifiedDate, createdOn\", function () {\r",
							"    pm.expect(target).to.have.keys('id', 'event', 'author', 'parentComment', 'isAnonymous', 'hasParticipated', 'comment', 'status', 'lastModifiedDate', 'createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск комментариев в событии незарегистрированным пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set(\"eid\", event.id)\r",
							"        const comment = await api.addComment(user.id, rnd.getComment(event.id));\r",
							"        pm.request.removeQueryParams(['text']);\r",
							"        pm.request.addQueryParams([`text=` + comment.comment]);\r",
							"        pm.collectionVariables.set(\"response\", comment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get(\"response\");\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, author, parentComment, isAnonymous, hasParticipated, comment, status, lastModifiedDate, createdOn\", function () {\r",
							"    pm.expect(target).to.have.keys('id', 'event', 'author', 'parentComment', 'isAnonymous', 'hasParticipated', 'comment', 'status', 'lastModifiedDate', 'createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.createdOn).equal(target.createdOn, 'Дата создания комментария должна соответствовать дате искомого комментария');\r",
							"    pm.expect(source.comment).equal(target.comment, 'Текст комментария должен соответствовать тексту искомого комментария');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/events/:eventId/comments?text=0&hasParticipated=false&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=20",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments"
					],
					"query": [
						{
							"key": "text",
							"value": "0",
							"description": "текст для поиска в содержимом комментария"
						},
						{
							"key": "hasParticipated",
							"value": "false",
							"description": "искать только комментарии авторов которые участвовали в событии"
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должны быть оставлены комментарии"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должны быть оставлены комментарии"
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество комментариев, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "20",
							"description": "количество комментариев в наборе"
						}
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "(Required) id текущего события"
						}
					]
				},
				"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
			},
			"response": []
		},
		{
			"name": "Поиск в комментариях добавленных текущим пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        const comment = await api.addComment(user.id, rnd.getComment(event.id));\r",
							"        pm.request.removeQueryParams(['text']);\r",
							"        pm.request.addQueryParams([`text=` + comment.comment]);\r",
							"        pm.collectionVariables.set(\"response\", comment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get(\"response\");\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, author, parentComment, isAnonymous, hasParticipated, comment, status, lastModifiedDate, createdOn\", function () {\r",
							"    pm.expect(target).to.have.keys('id', 'event', 'author', 'parentComment', 'isAnonymous', 'hasParticipated', 'comment', 'status', 'lastModifiedDate', 'createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.createdOn).equal(target.createdOn, 'Дата создания комментария должна соответствовать дате искомого комментария');\r",
							"    pm.expect(source.comment).equal(target.comment, 'Текст комментария должен соответствовать тексту искомого комментария');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments?text=0&hasParticipated=false&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=20&showDeleted=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "text",
							"value": "0",
							"description": "текст для поиска в содержимом комментария"
						},
						{
							"key": "hasParticipated",
							"value": "false",
							"description": "искать только комментарии авторов которые участвовали в событии"
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должны быть оставлены комментарии"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должны быть оставлены комментарии"
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество комментариев, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "20",
							"description": "количество комментариев в наборе"
						},
						{
							"key": "showDeleted",
							"value": "false",
							"description": "показать удаленные комментарии текущего пользователя"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				},
				"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
			},
			"response": []
		},
		{
			"name": "Поиск во всех комментариях администратором",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        const comment = await api.addComment(user.id, rnd.getComment(event.id));\r",
							"        pm.request.removeQueryParams(['text']);\r",
							"        pm.request.addQueryParams([`text=` + comment.comment]);\r",
							"        pm.collectionVariables.set(\"response\", comment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get(\"response\");\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, author, parentComment, isAnonymous, hasParticipated, comment, status, lastModifiedDate, createdOn\", function () {\r",
							"    pm.expect(target).to.have.keys('id', 'event', 'author', 'parentComment', 'isAnonymous', 'hasParticipated', 'comment', 'status', 'lastModifiedDate', 'createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.createdOn).equal(target.createdOn, 'Дата создания комментария должна соответствовать дате искомого комментария');\r",
							"    pm.expect(source.comment).equal(target.comment, 'Текст комментария должен соответствовать тексту искомого комментария');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/comments?text=0&hasParticipated=false&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=20&showDeleted=false",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "text",
							"value": "0",
							"description": "текст для поиска в содержимом комментария"
						},
						{
							"key": "hasParticipated",
							"value": "false",
							"description": "искать только комментарии авторов которые участвовали в событии"
						},
						{
							"key": "rangeStart",
							"value": "2022-01-06%2013%3A30%3A38",
							"description": "дата и время не раньше которых должны быть оставлены комментарии"
						},
						{
							"key": "rangeEnd",
							"value": "2097-09-06%2013%3A30%3A38",
							"description": "дата и время не позже которых должны быть оставлены комментарии"
						},
						{
							"key": "from",
							"value": "0",
							"description": "количество комментариев, которые нужно пропустить для формирования текущего набора"
						},
						{
							"key": "size",
							"value": "20",
							"description": "количество комментариев в наборе"
						},
						{
							"key": "showDeleted",
							"value": "false",
							"description": "показать удаленные комментарии текущего пользователя"
						}
					]
				},
				"description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
			},
			"response": []
		},
		{
			"name": "Изменение комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let comment;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id)\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        const comment = await api.addComment(user.id, rnd.getComment(event.id));\r",
							"        pm.collectionVariables.set(\"cid\", comment.id)\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            comment: \"updated text\"\r",
							"        }),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, author, parentComment, isAnonymous, hasParticipated, comment, status, lastModifiedDate, createdOn\", function () {\r",
							"    pm.expect(target).to.have.keys('id', 'event', 'author', 'parentComment', 'isAnonymous', 'hasParticipated', 'comment', 'status', 'lastModifiedDate', 'createdOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(\"updated text\").equal(target.comment, 'Текст комментария должн совпадать с отправленным');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария текущим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"const source = pm.collectionVariables.get(\"response\");\r",
							"const commentId = pm.collectionVariables.get(\"cid\");\r",
							"const eventId = pm.collectionVariables.get(\"eid\");\r",
							"\r",
							"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
							"    pm.expect(String(source.id)).to.eql(String(commentId));\r",
							"});\r",
							"\r",
							"let body\r",
							"const req = {\r",
							"                url: \"http://localhost:8080/events/\" + eventId + \"/comments/\",\r",
							"                method: \"GET\",\r",
							"                body: body == null ? \"\" : JSON.stringify(body),\r",
							"                header: { \"Content-Type\": \"application/json\" },\r",
							"            };\r",
							"pm.sendRequest(req, (error, response) => {\r",
							"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){\r",
							"        pm.expect(response.json().length).to.eql(0);\r",
							"    });\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set(\"uid\", user.id);\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        const comment = await api.addComment(user.id, rnd.getComment(event.id));\r",
							"        pm.collectionVariables.set(\"cid\", comment.id);\r",
							"        const foundedComment = await api.findComment(event.id, comment.id);\r",
							"        pm.collectionVariables.set(\"response\", foundedComment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id пользователя"
						},
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id комментария"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"const source = pm.collectionVariables.get(\"response\");\r",
							"const commentId = pm.collectionVariables.get(\"cid\");\r",
							"const eventId = pm.collectionVariables.get(\"eid\");\r",
							"\r",
							"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
							"    pm.expect(String(source.id)).to.eql(String(commentId));\r",
							"});\r",
							"\r",
							"let body\r",
							"const req = {\r",
							"                url: \"http://localhost:8080/events/\" + eventId + \"/comments/\",\r",
							"                method: \"GET\",\r",
							"                body: body == null ? \"\" : JSON.stringify(body),\r",
							"                header: { \"Content-Type\": \"application/json\" },\r",
							"            };\r",
							"pm.sendRequest(req, (error, response) => {\r",
							"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){\r",
							"        pm.expect(response.json().length).to.eql(0);\r",
							"    });\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        pm.collectionVariables.set(\"eid\", event.id);\r",
							"        const comment = await api.addComment(user.id, rnd.getComment(event.id));\r",
							"        pm.collectionVariables.set(\"cid\", comment.id);\r",
							"        const foundedComment = await api.findComment(event.id, comment.id);\r",
							"        pm.collectionVariables.set(\"response\", foundedComment);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{cid}}",
							"description": "(Required) id комментария"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, comment, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/comments\", comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findComment(eventId, commentId, verbose=null) {",
					"        return this.get('/events/' + eventId + '/comments/' + commentId, null, \"Ошибка при поиске комментария по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}')",
					"        }",
					"    }",
					"",
					"    getComment(eventId) {",
					"        return {",
					"            eventId: eventId,",
					"            parentCommentId: null,",
					"            isAnonymous: false,",
					"            comment: pm.variables.replaceIn('{{$randomLoremParagraph}}').toString()",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "cid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "сid",
			"value": ""
		}
	]
}